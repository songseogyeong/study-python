# 회원의 주문 금액(pay)과 회원의 쿠폰 할인율과 개수(coupon, count)를 전달받은 뒤
# 회원이 보유한 쿠폰의 할인율을 주문 금액에 순차 적용하는 함수 제작
# 할인율이 적용된 주문 금액이 정수로 리턴된다.
# 쿠폰의 할인율은 백분율로 되어있다.
# 쿠폰의 개수는 주문 개수보다 많을 수 있다.
# comprehension을 사용한다.
# 쿠폰 종류는 단 1개, 쿠폰 할인율은 40과 같은 1~100사이의 정수
#
# coupon=40
# count=5
#
# 아래와 같이 무조건 1개 종류의 쿠폰 여러 장이다.
# 40%쿠폰 5개
#
# 아래와 같은 상황은 없다.
# 10%쿠폰 1개, 20%쿠폰 2개



# args: pay
# kwargs: 할인율과 = 개수

# 회원의 주문 금액(pay)과  회원의 쿠폰 할인율과 개수 (coupon, count)를 전달 받은 뒤
def order_info(*args, **kargs):
    '''
    회원이 보유한 쿠폰의 할인율을 주문금액에 순차 적용하는 함수 제작
    :param args: 주문금액(pay)
    :param kargs:할인율(coupon) = 개수(count)
    '''

    # 회원의 주문 금액
    # 초기값 설정
    total=0
    # args를 i에 담고
    for i in args:
        # total 값에 i를 더한다
        total += i

    # 회원이 보유한 쿠폰의 할인율을 주문 금액에 순차 적용하는 함수 제작
    count = [i * 0.4 for i in total]

    for i in range():


# order_info에 매개값 작성(주문금액, 쿠폰 할인율 = 개수)
oder_info(2000, 40% = 5)




# 할인율이 적용된 주문 금액이 정수로 리턴된다.

# 쿠폰의 할인율은 백분율로 되어 있다.

# 쿠폰의 개수는 주문 개수보다 많을 수 있다.

# comprehension을 사용한다
