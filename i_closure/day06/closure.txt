클로저(closure, 폐쇄): 함수 안에 함수, 모듈화
* 모듈 = 부품
    함수가 정의된 시점의 변수를 기억하고, 이 변수를 나중에 참조 혹은 변경이 가능하도록 해준다.
    내부 영역에 선언된 변수(=지역변수)는 외부에서 접근이 불가능(=그 변수를 일부러 숨길 때 사용하기도함)하기 때문에 데이터 은닉(=은닉화, 캡슐화)을 할 수 있으며,
    * 은닉화, 캡슐화 쓰는 이유는? 주문 함수 만듦>주문이 완료되면 배송됨>주문 정보가 있어야 배송을함>주문코드 안에 배송 정보씀>주문 안에 2개의 서비스가 나옴>유지보수 시 하나에 문제 생기면 다 망함
    > 그래서 클로저를 통해 주문안에 배송을 만들수도 있고 주문 따로 배송따로 할 수 있음
    > 따로 하면 문제점 주문없이도 배송을 사용할 수 있음, 배송 자체로 이슈가됨
    > 그래서 배송을 따로 하는게 아니라 숨겨야함
    >그래서 주문에 넣고 주문을 해야만  배송을 할 수 있게끔 캡슐화해주는 것
    > 주문에 있는 지역변수들은 클로저를 통해 저장
    * 함수에 있는 결과를 밖에서 사용하려면 return사용
    함수가 종료된 이후에도 지역변수에 접근할 수 있기 때문에 ★데이터 지속성을 가지고 있다.
    또한, 다른 함수를 인자로 받거나 리턴할 수 있는 함수형 프로그래밍이 가능해진다.
    * 함수를 값처럼 쓰겠다는 것, 함수안에 함수를 선언, 외부에 만들어둔 리턴값을 하면됨 = 함수의 프로그래밍
    하지만, 코드 복잡성이 증가하고 지역변수를 메모리에 유지하기 때문에 메모리 사용량이 증가될 수 있다.*=목적에 맞게 써라

    지역변수는 프로그램을 끄면 다시 사용 불가(메모리 해제)
    클로저로 선언하면 클로저에 저장됨
    지역변수를 기억했다가 나중에 가져다가 쓰거나 변경할 수 있다. = 클로저의 사용

    *클로저 예시(실무에서는.. 이렇게 사용 ㄴㄴ)
    로그인 마이페이지
    >로그인을 하고 마이페이지를 해야함
    >클로저 사용해서 로그인 안에 마이페이지를 넣음

    def 로그인():
        def 마이페이지():

    마이페이지 사용 하려면
    로그인()()하면됨

---------------------------------------------------------
클로저 구현 코드
    def out(arg):
        pass

    --

    def out(arg):
        # 지역변수 선언
        local_variable = value

        def in(arg):
            # 아웃에 있는 함수를 그냥 쓸 수 있음
            #read local_variable
            value = operate something

            return value

    return in
