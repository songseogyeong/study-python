상속
    1. 기존에 선언된 클래스의 필드를 새롭게 만들 클래스의 필드로 사용하고자 할 때
    (예시) 2G - 전화 문자, 3G - 전화 문자 인터넷...
        2G(부모)에 있는 전화, 문자를 3G(자식)로 가져온다
    2. 여러 클래스를 선언하면서, 겹치는 필드가 있을 경우 부모 클래스를 선언한 뒤
        겹치는 필드를 구성하고 각 자식 클래스에 상속해 준다(추상화).

상속 문법
    class A:
        A 필드

    class B:
        B 필드

    ↓ A필드를 B필드에 상속 시킨다

    class A:
        A 필드

    class B(A):
        A, B 필드

    A: 부모 클래스, 상위 클래스, 슈퍼 클래스, 기반 클래스
    B: 자식 클래스, 하위 클래스, 서브 클래스, 파생 클래스


super().__init__() : 부모 생성자
    자식 객체로 부모 필드에 접근할 수 있다.
    하지만, 자식 생성자만 호출하기 때문에, 자식 필드만 메모리에 할당된다고 생각할 수 있다.
    사실, 자식 생성자에는 항상 부모 생성자를 호출하기 때문에 자식 생성자 호출 시 부모와 자식 필드 모두 할당된다.
    이때 부모 생성자를 호출하는 방법은 super().__init__()를 사용하는 것이다.
    만약, super().__init__()을 직접 작성하지 않더라도 컴파일러가 자동으로 작성해 준다.

    * 부모가 없는 class에도 super이 있는데, 여기서 super은 오브젝트


오버라이딩(재정의, 무시하기)
    부모 필드에서 선언한 메소드를 자식 필드에서 수정하고자 할 때 재정의를 해야 한다.
    이는 자식에서 부모 필드의 메소드와 동일한 이름으로 선언하는 문법을 의미한다.
    접근한 객체와 가까운 곳부터 찾기 때문에, 자식 필드에 해당하는 메소드가 있다면 재정의된 메소드가 실행된다.

